// Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/categories": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "set Get Categories",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Category"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "set Edit Category",
                "parameters": [
                    {
                        "description": "Category name",
                        "name": "payload",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/categories.EditCategoryRequestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Category"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "set Add Category",
                "parameters": [
                    {
                        "description": "Category name",
                        "name": "payload",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/categories.AddCategoryRequestBody"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Category"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "set Delete Category",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/models.Category"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/categories/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "categories"
                ],
                "summary": "set Get Category",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Category"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/foods": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "foods"
                ],
                "summary": "set Get foods",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category Name",
                        "name": "categoryName",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sub Category Name",
                        "name": "subCategoryName",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Food"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            },
            "put": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "foods"
                ],
                "summary": "set Edit Food",
                "parameters": [
                    {
                        "description": "Food name",
                        "name": "payload",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/foods.EditFoodRequestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Food"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "foods"
                ],
                "summary": "set Add Food",
                "parameters": [
                    {
                        "description": "Food",
                        "name": "payload",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/foods.AddFoodRequestBody"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/models.Food"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            },
            "delete": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "foods"
                ],
                "summary": "set Delete Food",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "id",
                        "name": "id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/models.Food"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/foods/sort/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "foods"
                ],
                "summary": "set Sort Food",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Food id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Category Name",
                        "name": "categoryName",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sub Category Name",
                        "name": "subCategoryName",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Food"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/foods/{id}": {
            "get": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "foods"
                ],
                "summary": "set Get Food",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Food id",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Food"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/login": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "login"
                ],
                "summary": "set login",
                "parameters": [
                    {
                        "description": "Username e Pin",
                        "name": "payload",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/models.Login"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Login"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/refresh": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "refresh"
                ],
                "summary": "set refresh",
                "parameters": [
                    {
                        "type": "string",
                        "description": "refresh",
                        "name": "refresh",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Login"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/user": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "get user",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            },
            "post": {
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "set user",
                "parameters": [
                    {
                        "description": "Dados do usuário",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        }
    },
    "definitions": {
        "categories.AddCategoryRequestBody": {
            "type": "object",
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "categories.EditCategoryRequestBody": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "foods.AddFoodRequestBody": {
            "type": "object",
            "properties": {
                "categoryName": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "subCategoryName": {
                    "type": "string"
                }
            }
        },
        "foods.EditFoodRequestBody": {
            "type": "object",
            "properties": {
                "categoryName": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "subCategoryName": {
                    "type": "string"
                }
            }
        },
        "gorm.DeletedAt": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        },
        "models.Category": {
            "type": "object",
            "properties": {
                "created": {
                    "type": "string"
                },
                "deleted": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "updated": {
                    "type": "string"
                }
            }
        },
        "models.Food": {
            "type": "object",
            "properties": {
                "categoryNname": {
                    "type": "string"
                },
                "created": {
                    "type": "string"
                },
                "deleted": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "subcategoryName": {
                    "type": "string"
                },
                "updated": {
                    "type": "string"
                }
            }
        },
        "models.Login": {
            "type": "object",
            "properties": {
                "pin": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.User": {
            "type": "object",
            "required": [
                "email",
                "username"
            ],
            "properties": {
                "created": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "updated": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "BearerAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
